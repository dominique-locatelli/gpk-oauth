
name is gopak

Use Cases
=========

releasing a simple project:
	1/ fix dependencies (use a release version everywhere)
	2/ git commit && tag && push tag && gpk push, mark it in the stage file

idea: use a kind of "defer" in the staging script so that it will be executed when closing the staging


releasing a root project:
create a stage ( in local repo, and/or git and/or gpk)
use gpk list to get the list of project to be released first (and added to the stage file, to remember what to do )
for each one (in the order given by the list): release it as a simple project
(the stage file is used to autofix the dependencies)

same as for the simple project expect that there is a 3rd step:
	3/ gpk build the binaries (and push them)


at the end, promote the stage is all about:
	merge cloned git repo into main, 
	promote gpk staging repo
	close  the stage file (maybe run the defer commands ?)

	
	therefore here are the commands: 
	gpk dependency-fix (require a staging file, and tries to auto fix all dependencies)
	gpk commit-install : git commit tag version, 	gpk install version => gpk commit-install version (new command that encapsulate git commit -m )
	gpk push-push = gpk push version & git push tag => new command gpk repush version (encapsulate git push tag, and gpk push tag)
	the push push is defered for after the staging 
	
	
	gpk stage init (create a staging file or fail)
	gpk stage status (where am i, what to do next)
	gpk stage close (run defered command and delete the file, confirm if not empty )
	
	
	issue is all about transactional (and of course repealling or commiting)
	the transaction aspect of the push is not "most important" stuff. The first pain is the "staging" issue, and 
	the capacity to "batch" the release process.
	
	we have seen that we need to ensure the scm commit & tag, and scm push tag too (in deferred mode)
	If we ensure it at project level we can fully batch the stagging process.
	I'd rather do: 
	gpk stage init (fill a new staging file with the dependency mess)
	then gpk stage just displays the next operation to do (release prj xxx)
	on the project xx doing stuff like 
	gpk release (fix dependencies and push, and defer the tag and pushes)
	etc until the do stack is empty.
	gpk stage next (displays the next action to do)
	(not lost until gpk stage next is called again, or gpk stage status)
	
	then it's time to test the release (and maybe backup the stagging file)
	
	and then do a gpk stage close which will start a nex cycle of tasks
	
	gpk stage start, next, status, closing.
	
	
	
	
Doc
===
	we need use case doc
	we need command doc
	we need version philosophy
	
	
	
	
	
	